shadow$provide.module$node_modules$math_expression_evaluator$src$postfix=function(global,require,module,exports){var Mexp=require("module$node_modules$math_expression_evaluator$src$lexer");Mexp.prototype.toPostfix=function(){for(var post=[],elem,popped,pre,ele,stack=[{value:"(",type:4,pre:0}],arr=this.value,i=1;i<arr.length;i++)if(1===arr[i].type||3===arr[i].type||13===arr[i].type)1===arr[i].type&&(arr[i].value=Number(arr[i].value)),post.push(arr[i]);else if(4===arr[i].type)stack.push(arr[i]);else if(5===
arr[i].type)for(;4!==(popped=stack.pop()).type;)post.push(popped);else if(11===arr[i].type){for(;4!==(popped=stack.pop()).type;)post.push(popped);stack.push(popped)}else{elem=arr[i];pre=elem.pre;ele=stack[stack.length-1];popped=ele.pre;ele="Math.pow"==ele.value&&"Math.pow"==elem.value;if(!(pre>popped))for(;popped>=pre&&!ele||ele&&pre<popped;)popped=stack.pop(),ele=stack[stack.length-1],post.push(popped),popped=ele.pre,ele="Math.pow"==elem.value&&"Math.pow"==ele.value;stack.push(elem)}return new Mexp(post)};
module.exports=Mexp}
//# sourceMappingURL=module$node_modules$math_expression_evaluator$src$postfix.js.map
