{
"version":3,
"file":"module$node_modules$reduce_function_call$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoB3GC,QAASA,mBAAkB,CAACC,eAAD,CAASC,UAAT,CAAqBC,QAArB,CAA+B,CAExD,MAAOC,iBAAA,CAAiBH,eAAjB,CAAyBC,UAAzB,CAAAG,OAAA,CAA4C,QAAQ,CAACJ,MAAD,CAASK,GAAT,CAAc,CACvE,MAAOL,OAAAM,QAAA,CAAeD,GAAAE,mBAAf,CAAwC,GAAxC,CAA8CF,GAAAG,QAAAC,KAA9C,CAAiE,GAAjE,CAAsEC,gBAAA,CAAiBL,GAAAG,QAAAC,KAAjB,CAAmCJ,GAAAE,mBAAnC,CAA2DL,QAA3D,CAFpEF,eAEoE,CAA2EC,UAA3E,CAAtE,CADgE,CAAlE,CAEJD,eAFI,CAFiD,CAe1DG,QAASA,iBAAgB,CAACQ,IAAD,CAAOV,UAAP,CAAmB,CAC1C,IAAIW,YAAc,EAAlB,CAEIC,KAA6B,QAAtB;AAAA,MAAOZ,WAAP,CAAiC,IAAIa,MAAJ,CAAW,MAAX,CAAoBb,UAApB,CAAiC,MAAjC,CAAjC,CAA4EA,UACvF,GAAG,CACD,IAAIc,YAAcF,IAAAG,KAAA,CAAUL,IAAV,CAClB,IAAI,CAACI,WAAL,CACE,KAEF,IAAuBE,IAAAA,EAAvB,GAAIF,WAAA,CAAY,CAAZ,CAAJ,CACE,KAAUG,MAAJ,CAAU,4EAAV,CAAyFjB,UAAzF,CAAN,CAEF,IAAIkB,GAAKJ,WAAA,CAAY,CAAZ,CAAT,CAEIP,QAAUY,QAAA,CAAS,GAAT,CAAc,GAAd,CAAmBT,IAAAU,UAAA,CADhBN,WAAAO,MACgB,CAAnB,CAEd,IAAI,CAACd,OAAL,EAAgBA,OAAAe,MAAhB,GAAkCR,WAAA,CAAY,CAAZ,CAAAS,OAAlC,CAA0D,CAA1D,CACE,KAAM,KAAIC,WAAJ,CAAgBN,EAAhB,CAAqB,wCAArB,CAAgER,IAAhE,CAAuE,GAAvE,CAAN,CAGFC,WAAAc,KAAA,CAAiB,CAAClB,QAASA,OAAV,CAAmBD,mBAAoBY,EAAvC,CAAjB,CACAR;IAAA,CAAOH,OAAAmB,KAjBN,CAAH,MAmBOd,IAAAe,KAAA,CAAUjB,IAAV,CAnBP,CAqBA,OAAOC,YAzBmC,CAoC5CF,QAASA,iBAAiB,CAACV,MAAD,CAASO,kBAAT,CAA6BL,QAA7B,CAAuCS,IAAvC,CAA6CV,UAA7C,CAAyD,CAEjF,MAAOC,SAAA,CAASH,kBAAA,CAAmBC,MAAnB,CAA2BC,UAA3B,CAAuCC,QAAvC,CAAT,CAA2DK,kBAA3D,CAA+EI,IAA/E,CAF0E,CAnEnF,IAAIS,SAAWxB,OAAA,CAAQ,0CAAR,CAOfC,OAAAC,QAAA,CAAiBC,kBAX0F;",
"sources":["node_modules/reduce-function-call/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$reduce_function_call$index\"] = function(global,require,module,exports) {\n/*\n * Module dependencies\n */\nvar balanced = require(\"balanced-match\")\n\n/**\n * Expose `reduceFunctionCall`\n *\n * @type {Function}\n */\nmodule.exports = reduceFunctionCall\n\n/**\n * Walkthrough all expressions, evaluate them and insert them into the declaration\n *\n * @param {Array} expressions\n * @param {Object} declaration\n */\n\nfunction reduceFunctionCall(string, functionRE, callback) {\n  var call = string\n  return getFunctionCalls(string, functionRE).reduce(function(string, obj) {\n    return string.replace(obj.functionIdentifier + \"(\" + obj.matches.body + \")\", evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE))\n  }, string)\n}\n\n/**\n * Parses expressions in a value\n *\n * @param {String} value\n * @returns {Array}\n * @api private\n */\n\nfunction getFunctionCalls(call, functionRE) {\n  var expressions = []\n\n  var fnRE = typeof functionRE === \"string\" ? new RegExp(\"\\\\b(\" + functionRE + \")\\\\(\") : functionRE\n  do {\n    var searchMatch = fnRE.exec(call)\n    if (!searchMatch) {\n      return expressions\n    }\n    if (searchMatch[1] === undefined) {\n      throw new Error(\"Missing the first couple of parenthesis to get the function identifier in \" + functionRE)\n    }\n    var fn = searchMatch[1]\n    var startIndex = searchMatch.index\n    var matches = balanced(\"(\", \")\", call.substring(startIndex))\n\n    if (!matches || matches.start !== searchMatch[0].length - 1) {\n      throw new SyntaxError(fn + \"(): missing closing ')' in the value '\" + call + \"'\")\n    }\n\n    expressions.push({matches: matches, functionIdentifier: fn})\n    call = matches.post\n  }\n  while (fnRE.test(call))\n\n  return expressions\n}\n\n/**\n * Evaluates an expression\n *\n * @param {String} expression\n * @returns {String}\n * @api private\n */\n\nfunction evalFunctionCall (string, functionIdentifier, callback, call, functionRE) {\n  // allow recursivity\n  return callback(reduceFunctionCall(string, functionRE, callback), functionIdentifier, call)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","reduceFunctionCall","string","functionRE","callback","getFunctionCalls","reduce","obj","replace","functionIdentifier","matches","body","evalFunctionCall","call","expressions","fnRE","RegExp","searchMatch","exec","undefined","Error","fn","balanced","substring","index","start","length","SyntaxError","push","post","test"]
}
