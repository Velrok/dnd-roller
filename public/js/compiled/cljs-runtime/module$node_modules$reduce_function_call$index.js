shadow$provide.module$node_modules$reduce_function_call$index=function(global,require,module,exports){function reduceFunctionCall(string$jscomp$0,functionRE,callback){return getFunctionCalls(string$jscomp$0,functionRE).reduce(function(string,obj){return string.replace(obj.functionIdentifier+"("+obj.matches.body+")",evalFunctionCall(obj.matches.body,obj.functionIdentifier,callback,string$jscomp$0,functionRE))},string$jscomp$0)}function getFunctionCalls(call,functionRE){var expressions=[],fnRE="string"===
typeof functionRE?new RegExp("\\b("+functionRE+")\\("):functionRE;do{var searchMatch=fnRE.exec(call);if(!searchMatch)break;if(void 0===searchMatch[1])throw Error("Missing the first couple of parenthesis to get the function identifier in "+functionRE);var fn=searchMatch[1],matches=balanced("(",")",call.substring(searchMatch.index));if(!matches||matches.start!==searchMatch[0].length-1)throw new SyntaxError(fn+"(): missing closing ')' in the value '"+call+"'");expressions.push({matches:matches,functionIdentifier:fn});
call=matches.post}while(fnRE.test(call));return expressions}function evalFunctionCall(string,functionIdentifier,callback,call,functionRE){return callback(reduceFunctionCall(string,functionRE,callback),functionIdentifier,call)}var balanced=require("module$node_modules$balanced_match$index");module.exports=reduceFunctionCall}
//# sourceMappingURL=module$node_modules$reduce_function_call$index.js.map
