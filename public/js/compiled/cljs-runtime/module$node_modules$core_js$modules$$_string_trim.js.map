{
"version":3,
"file":"module$node_modules$core_js$modules$$_string_trim.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC1GC,QAAUH,OAAA,CAAQ,8CAAR,CADgG,CAE1GI,QAAUJ,OAAA,CAAQ,+CAAR,CAFgG,CAG1GK,MAAUL,OAAA,CAAQ,6CAAR,CAHgG,CAQ1GM,MAAU,8FARgG,CAS1GC,MAAU,8FAEVC;MAAAA,CAAWA,QAAQ,CAACC,GAAD,CAAMC,IAAN,CAAW,CAChC,IAAIC,IAAO,EACXA,IAAA,CAAIF,GAAJ,CAAA,CAAWC,IAAA,CAAKE,IAAL,CACXT,QAAA,CAAQA,OAAAU,EAAR,CAAoBV,OAAAW,EAApB,CAAgCT,KAAA,CAAM,QAAQ,EAAE,CAC9C,MAAO,CAAC,CAXEU,6CAWD,CAAON,GAAP,CAAA,EAAT,EARUO,IAQV,EARUA,IAQgB,CAAIP,GAAJ,CAAA,EADoB,CAAhB,CAAhC,CAEI,QAFJ,CAEcE,GAFd,CAHgC,CAWlC,KAAIC,KAAOJ,MAAAI,KAAPA,CAAuBK,QAAQ,CAACC,MAAD,CAASC,IAAT,CAAc,CAC/CD,MAAA,CAASE,MAAA,CAAOhB,OAAA,CAAQc,MAAR,CAAP,CACNC,KAAH,CAAU,CAAV,GAAYD,MAAZ,CAAqBA,MAAAG,QAAA,CAAef,KAAf,CAAsB,EAAtB,CAArB,CACGa,KAAH,CAAU,CAAV,GAAYD,MAAZ,CAAqBA,MAAAG,QAAA,CAAed,KAAf,CAAsB,EAAtB,CAArB,CACA,OAAOW,OAJwC,CAOjDjB,OAAAC,QAAA,CAAiBM,MA7B6F;",
"sources":["node_modules/core-js/modules/$.string-trim.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$core_js$modules$$_string_trim\"] = function(global,require,module,exports) {\nvar $export = require('./$.export')\n  , defined = require('./$.defined')\n  , fails   = require('./$.fails')\n  , spaces  = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n      '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF'\n  , space   = '[' + spaces + ']'\n  , non     = '\\u200b\\u0085'\n  , ltrim   = RegExp('^' + space + space + '*')\n  , rtrim   = RegExp(space + space + '*$');\n\nvar exporter = function(KEY, exec){\n  var exp  = {};\n  exp[KEY] = exec(trim);\n  $export($export.P + $export.F * fails(function(){\n    return !!spaces[KEY]() || non[KEY]() != non;\n  }), 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function(string, TYPE){\n  string = String(defined(string));\n  if(TYPE & 1)string = string.replace(ltrim, '');\n  if(TYPE & 2)string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n};"],
"names":["shadow$provide","global","require","module","exports","$export","defined","fails","ltrim","rtrim","exporter","KEY","exec","exp","trim","P","F","spaces","non","exporter.trim","string","TYPE","String","replace"]
}
