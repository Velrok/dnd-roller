{
"version":3,
"file":"module$node_modules$reduce_css_calc$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/reduce-css-calc/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$reduce_css_calc$index\"] = function(global,require,module,exports) {\n/**\n * Module dependencies\n */\nvar balanced = require(\"balanced-match\")\nvar reduceFunctionCall = require(\"reduce-function-call\")\nvar mexp = require(\"math-expression-evaluator\")\n\n/**\n * Constantes\n */\nvar MAX_STACK = 100 // should be enough for a single calc()...\nvar NESTED_CALC_RE = /(\\+|\\-|\\*|\\\\|[^a-z]|)(\\s*)(\\()/g\n\n/**\n * Global variables\n */\nvar stack\n\n/**\n * Expose reduceCSSCalc plugin\n *\n * @type {Function}\n */\nmodule.exports = reduceCSSCalc\n\n/**\n * Reduce CSS calc() in a string, whenever it's possible\n *\n * @param {String} value css input\n */\nfunction reduceCSSCalc(value, decimalPrecision) {\n  stack = 0\n  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision)\n\n  // Allow calc() on multiple lines\n  value = value.replace(/\\n+/g, \" \")\n\n  /**\n   * Evaluates an expression\n   *\n   * @param {String} expression\n   * @returns {String}\n   */\n  function evaluateExpression (expression, functionIdentifier, call) {\n    if (stack++ > MAX_STACK) {\n      stack = 0\n      throw new Error(\"Call stack overflow for \" + call)\n    }\n\n    if (expression === \"\") {\n      throw new Error(functionIdentifier + \"(): '\" + call + \"' must contain a non-whitespace string\")\n    }\n\n    expression = evaluateNestedExpression(expression, call)\n\n    var units = getUnitsInExpression(expression)\n\n    // If the expression contains multiple units or CSS variables,\n    // then let the expression be (i.e. browser calc())\n    if (units.length > 1 || expression.indexOf(\"var(\") > -1) {\n      return functionIdentifier + \"(\" + expression + \")\"\n    }\n\n    var unit = units[0] || \"\"\n\n    if (unit === \"%\") {\n      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):\n      // console.log(expression)\n      expression = expression.replace(/\\b[0-9\\.]+%/g, function(percent) {\n        return parseFloat(percent.slice(0, -1)) * 0.01\n      })\n    }\n\n    // Remove units in expression:\n    var toEvaluate = expression.replace(new RegExp(unit, \"gi\"), \"\")\n    var result\n\n    try {\n      result = mexp.eval(toEvaluate)\n    }\n    catch (e) {\n      return functionIdentifier + \"(\" + expression + \")\"\n    }\n\n    // Transform back to a percentage result:\n    if (unit === \"%\") {\n      result *= 100\n    }\n\n    // adjust rounding shit\n    // (0.1 * 0.2 === 0.020000000000000004)\n    if (functionIdentifier.length || unit === \"%\") {\n      result = Math.round(result * decimalPrecision) / decimalPrecision\n    }\n\n    // Add unit\n    result += unit\n\n    return result\n  }\n\n  /**\n   * Evaluates nested expressions\n   *\n   * @param {String} expression\n   * @returns {String}\n   */\n  function evaluateNestedExpression(expression, call) {\n    // Remove the calc part from nested expressions to ensure\n    // better browser compatibility\n    expression = expression.replace(/((?:\\-[a-z]+\\-)?calc)/g, \"\")\n    var evaluatedPart = \"\"\n    var nonEvaluatedPart = expression\n    var matches\n    while ((matches = NESTED_CALC_RE.exec(nonEvaluatedPart))) {\n      if (matches[0].index > 0) {\n        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index)\n      }\n\n      var balancedExpr = balanced(\"(\", \")\", nonEvaluatedPart.substring([0].index))\n      if (balancedExpr.body === \"\") {\n        throw new Error(\"'\" + expression + \"' must contain a non-whitespace string\")\n      }\n\n      var evaluated = evaluateExpression(balancedExpr.body, \"\", call)\n\n      evaluatedPart += balancedExpr.pre + evaluated\n      nonEvaluatedPart = balancedExpr.post\n    }\n\n    return evaluatedPart + nonEvaluatedPart\n  }\n\n  return reduceFunctionCall(value, /((?:\\-[a-z]+\\-)?calc)\\(/, evaluateExpression)\n}\n\n/**\n * Checks what units are used in an expression\n *\n * @param {String} expression\n * @returns {Array}\n */\n\nfunction getUnitsInExpression(expression) {\n  var uniqueUnits = []\n  var uniqueLowerCaseUnits = []\n  var unitRegEx = /[\\.0-9]([%a-z]+)/gi\n  var matches = unitRegEx.exec(expression)\n\n  while (matches) {\n    if (!matches || !matches[1]) {\n      continue\n    }\n\n    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {\n      uniqueUnits.push(matches[1])\n      uniqueLowerCaseUnits.push(matches[1].toLowerCase())\n    }\n\n    matches = unitRegEx.exec(expression)\n  }\n\n  return uniqueUnits\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getUnitsInExpression","expression","uniqueUnits","uniqueLowerCaseUnits","unitRegEx","matches","exec","indexOf","toLowerCase","push","balanced","reduceFunctionCall","mexp","NESTED_CALC_RE","stack","reduceCSSCalc","value","decimalPrecision","evaluateExpression","functionIdentifier","call","MAX_STACK","Error","evaluateNestedExpression","units","length","unit","replace","percent","parseFloat","slice","toEvaluate","RegExp","result","eval","e","Math","round","evaluatedPart","nonEvaluatedPart","index","substring","balancedExpr","body","evaluated","pre","post","pow","undefined"]
}
