{"version":3,"sources":["dnd_roller/core.cljs"],"mappings":"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","names":["dnd-roller.core/bar-chart","reagent.core/adapt-react-class","js/module$node_modules$recharts$lib$index.BarChart","dnd-roller.core/bar","js/module$node_modules$recharts$lib$index.Bar","js/dnd-roller","js/dnd-roller.core","js/dnd-roller.core.rolls","dnd-roller.core/rolls","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","js/dnd-roller.core.dice-selection-reset-timer","dnd-roller.core/dice-selection-reset-timer","dnd-roller.core/dice-roll-sounds","dnd-roller.core/dice-sounds","iter__4523__auto__","s__38055","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","xs__6277__auto__","cljs.core/first","iterys__4519__auto__","s__38057","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__38059","cljs.core/chunk-buffer","i__38058","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38056","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__38054","dice-type","n","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core.range.cljs$core$IFn$_invoke$arity$1","dnd-roller.core/round","x","G__38060","Math/round","js/dnd-roller.core.history","dnd-roller.core/history","dnd-roller.core/results-timeout","dnd-roller.core/<dice-roll-sounds>","s__38062","b__38064","i__38063","iter__38061","s","dnd-roller.core/play-random-dice-sound","d-type","rn","cljs.core/shuffle","rand-sound","js/document","dnd-roller.core/count-down","x__4219__auto__","y__4220__auto__","dnd-roller.core/d4","dnd-roller.core/d6","dnd-roller.core/d8","dnd-roller.core/d10","dnd-roller.core/d12","dnd-roller.core/d20","dnd-roller.core/d100","dnd-roller.core/all-dice","dnd-roller.core/roll-dice!","d","r","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/rand-int","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","js/Date","dnd-roller.core/<dice>","attr","dice","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","dnd-roller.core/<dice-selector>","s__38066","b__38068","i__38067","iter__38065","event","target","G__38069","G__38072","G__38070","G__38073","js/setTimeout","G__38071","G__38074","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","cljs.core/reset!","dnd-roller.core/<dice-board>","rolles","cljs.core/deref","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","min-v","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/min","max-v","cljs.core/max","cljs.core/empty?","s__38076","b__38078","i__38077","iter__38075","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","ds","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","dd","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","or__4131__auto__","cljs.core/+","dnd-roller.core/<distribution>","dist","s__38080","b__38082","i__38081","vec__38083","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","iter__38079","vec__38096","sides","results","cljs.core/group-by","distribution","cljs.core.into.cljs$core$IFn$_invoke$arity$2","s__38087","b__38089","i__38088","vec__38090","iter__38086","vec__38093","s__38100","b__38102","i__38101","vec__38103","iter__38099","vec__38106","v","items","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","s__38110","b__38112","i__38111","vec__38113","iter__38109","vec__38116","data","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","js/window","%","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/vals","dnd-roller.core/main-view","js/location","dnd-roller.core/start","reagent.dom.render.cljs$core$IFn$_invoke$arity$2","dnd-roller.core/init","js/setInterval","dnd-roller.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns dnd-roller.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as str]\n            [\"recharts\" :refer [BarChart Bar]]))\n\n(def bar-chart (r/adapt-react-class BarChart))\n(def bar (r/adapt-react-class Bar))\n\n(defonce rolls (r/atom []))\n(defonce dice-selection-reset-timer (r/atom 0))\n\n(def dice-roll-sounds [\"/audio/dice roll 1.m4a\"\n                       \"/audio/dice roll 2.m4a\"\n                       \"/audio/dice roll 3.m4a\"\n                       \"/audio/dice roll 4.m4a\"\n                       \"/audio/dice roll 5.m4a\"\n                       \"/audio/dice roll 6.m4a\"])\n\n(def dice-sounds\n  (for [dice-type [\"d4\" \"d6\" \"d8\" \"d10\" \"d12\" \"d20\" \"d100\"]\n        n (map inc (range 3))]\n    (str \"/audio/\" dice-type \" \" n \".m4a\")))\n\n(defn- round\n  [x]\n  (/\n   (Math/round (* 10 x))\n   10))\n\n(defonce history (r/atom ()))\n\n(def results-timeout 30)\n\n(defn <dice-roll-sounds>\n  []\n  [:div\n   (for [s dice-sounds]\n     [:audio {:id  (str \"da-\" s)\n              :key (str \"dice-audio-\" s)}\n      [:source {:src s}]])])\n\n(defn play-random-dice-sound\n  [d-type]\n  (let [rn (->> [1 2 3] shuffle first)\n        rand-sound (str \"/audio/\" d-type \" \" rn \".m4a\")]\n    (->> rand-sound\n         (str \"da-\")\n         (.getElementById js/document)\n         .play)))\n\n\n(defn count-down\n  [x]\n  (max 0 (dec x)))\n\n(def d4   {:sides   4 :img \"/img/dice/d4.png\"})\n(def d6   {:sides   6 :img \"/img/dice/perspective-dice-six.png\"})\n(def d8   {:sides   8 :img \"/img/dice/dice-eight-faces-eight.png\"})\n(def d10  {:sides  10 :img \"/img/dice/d10.png\"})\n(def d12  {:sides  12 :img \"/img/dice/d12.png\"})\n(def d20  {:sides  20 :img \"/img/dice/dice-twenty-faces-twenty.png\"})\n(def d100 {:sides 100 :img \"/img/dice/d100.png\"})\n\n(def all-dice [d4 d6 d8 d10 d12 d20 d100])\n\n(defn roll-dice!\n  [d]\n  (let [r (assoc d :value\n                 (inc (rand-int (:sides d))))]\n    (swap! history conj (assoc r :date-time (js/Date.)))\n    r))\n\n(defn <dice>\n  [attr dice]\n  [:img.dice-icon (merge {:src (:img dice)}\n                         attr)])\n\n(defn <dice-selector>\n  []\n  [:div.dice-selector\n   (for [d  all-dice]\n     [<dice> {:key (str \"d-selection-\" (:sides d))\n              :style {:animation-name \"dice-roll-animation\"\n                      :animation-play-state \"paused\"\n                      :animation-iteration-count \"infinite\"\n                      :animation-duration \"0.5s\"}\n              :on-click (fn [event]\n                          ;;(some-> event .-target .-style .-animation-play-state println)\n                          (let [target (some-> event .-target)]\n                            (some-> target .-style (.setProperty \"animation-play-state\" \"running\" \"\"))\n                            (js/setTimeout\n                              #(some-> target .-style (.setProperty \"animation-play-state\" \"paused\" \"\"))\n                              500))\n                          (play-random-dice-sound (str \"d\" (:sides d)))\n                          (swap! rolls conj\n                                 (-> d\n                                     (assoc :id (gensym))\n                                     roll-dice!))\n                          (reset! dice-selection-reset-timer results-timeout))}\n      d])])\n\n(defn <dice-board>\n  []\n  (let [rolles (keep :value @rolls)\n        min-v  (reduce min rolles)\n        max-v  (reduce max rolles)\n        ]\n    (if (empty? rolles)\n      [:div.dice-board]\n      [:div.dice-board\n       (for [d @rolls]\n         [:span.dice-board__roll\n          {:key (:id d)\n           :style {:display \"inline-block\"}\n           :on-click #(swap! rolls\n                             (fn [ds]\n                               (remove\n                                 (fn [dd] (= (:id d) (:id dd)))\n                                 ds)))}\n          [<dice> {} d]\n          [:p {:style {:text-align \"center\"\n                       :font-size \"3rem\"\n                       :margin \"5px\"}\n               :class (cond\n                        (= 1 (:value d))          \"crit-fail\"\n                        (= (:sides d) (:value d)) \"crit-roll\"\n                        ;(= min-v (:value d))      \"worst-roll\"\n                        ;(= max-v (:value d))      \"best-roll\"\n                        )}\n           (or (:value d) \"?\")]])\n       [:div.roll-summaries\n        [:span.roll-summaries__summary\n         [:span.roll-summaries__summary_value min-v]\n         [:span.roll-summaries__summary_label \"min\"]]\n        [:span.roll-summaries__summary\n         [:span.roll-summaries__summary_value max-v]\n         [:span.roll-summaries__summary_label \"max\"]]\n        [:span.roll-summaries__summary\n         [:span.roll-summaries__summary_value (round (/ (reduce + rolles) (count rolles)))]\n         [:span.roll-summaries__summary_label \"avg\"]]\n        [:span.roll-summaries__summary\n         [:span.roll-summaries__summary_value (reduce + rolles)]\n         [:span.roll-summaries__summary_label \"sum\"]]]])))\n\n(defn <distribution>\n  []\n  (let [dist (for [[sides results] (group-by :sides @history)]\n               (let [distribution\n                     (into {}\n                           (for [[v items] (group-by :value results)]\n                             [v (count items)]))]\n                 [sides distribution]))]\n    [:div.roll-distributions\n     (doall\n       (for [[sides data] (sort-by first dist)]\n         [:div.roll-distribution {:key (str \"dist-d\" sides)\n                                  :class (str \"dist-d\" sides)}\n          [bar-chart {:width (int (/ (.-innerWidth js/window) 4))\n                      :height 100\n                      :data (map (fn [%]\n                                   {:data (get data % 0)})\n                                 (map inc (range sides)))}\n           [bar {:dataKey \"data\" :fill \"#FFF\"}]]\n          [:p\n           (str \"D\" sides)\n           \" #\" (reduce + (vals data))]]))]))\n\n(defn main-view []\n  [:div.main\n   [<dice-roll-sounds>]\n   [:h1.app-title {:style {:display \"inline-block\"}} \"D&D Roller\"]\n   [:img.refresh-icon {:src \"/img/refresh.png\"\n                       :on-click #(.reload js/location true)}]\n   [:progress.dice-timeout {:max results-timeout\n                            :value @dice-selection-reset-timer}]\n   [<dice-selector>]\n   [<dice-board>]\n   [<distribution>] ])\n\n(defn start []\n  (rdom/render [main-view]\n               (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (js/setInterval #(do\n                     (swap! dice-selection-reset-timer count-down)\n                     (when (zero? @dice-selection-reset-timer)\n                       (reset! rolls [])))\n                  1000)\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}