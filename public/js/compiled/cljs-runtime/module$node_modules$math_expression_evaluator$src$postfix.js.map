{
"version":3,
"file":"module$node_modules$math_expression_evaluator$src$postfix.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAElH,IAAIC,KAAKH,OAAA,CAAQ,yDAAR,CAEZG,KAAAC,UAAAC,UAAA,CAA2BC,QAAS,EAAG,CAKtC,IALsC,IAElCC,KAAK,EAF6B,CAE1BC,IAF0B,CAErBC,MAFqB,CAETC,GAFS,CAELC,GAFK,CAG/BC,MAAM,CAAC,CAACC,MAAM,GAAP,CAAWC,KAAK,CAAhB,CAAkBJ,IAAI,CAAtB,CAAD,CAHyB,CAIlCK,IAAI,IAAAF,MAJ8B,CAK7BG,EAAE,CAAX,CAAcA,CAAd,CAAkBD,GAAAE,OAAlB,CAA8BD,CAAA,EAA9B,CACC,GAAiB,CAAjB,GAAGD,GAAA,CAAIC,CAAJ,CAAAF,KAAH,EAAkC,CAAlC,GAAoBC,GAAA,CAAIC,CAAJ,CAAAF,KAApB,EAAmD,EAAnD,GAAqCC,GAAA,CAAIC,CAAJ,CAAAF,KAArC,CACkB,CAEjB,GAFGC,GAAA,CAAIC,CAAJ,CAAAF,KAEH,GADCC,GAAA,CAAIC,CAAJ,CAAAH,MACD,CADcK,MAAA,CAAOH,GAAA,CAAIC,CAAJ,CAAAH,MAAP,CACd,EAAAN,IAAAY,KAAA,CAAUJ,GAAA,CAAIC,CAAJ,CAAV,CAHD,KAKK,IAAiB,CAAjB,GAAGD,GAAA,CAAIC,CAAJ,CAAAF,KAAH,CACJF,KAAAO,KAAA,CAAWJ,GAAA,CAAIC,CAAJ,CAAX,CADI,KAGA,IAAiB,CAAjB;AAAGD,GAAA,CAAIC,CAAJ,CAAAF,KAAH,CACJ,IAAA,CAAkC,CAAlC,GAAMA,CAACL,MAADK,CAAQF,KAAAQ,IAAA,EAARN,MAAN,CAAA,CACCP,IAAAY,KAAA,CAAUV,MAAV,CAFG,KAKA,IAAiB,EAAjB,GAAGM,GAAA,CAAIC,CAAJ,CAAAF,KAAH,CAAoB,CACxB,IAAA,CAAkC,CAAlC,GAAMA,CAACL,MAADK,CAAQF,KAAAQ,IAAA,EAARN,MAAN,CAAA,CACCP,IAAAY,KAAA,CAAUV,MAAV,CAEDG,MAAAO,KAAA,CAAWV,MAAX,CAJwB,CAApB,IAMA,CACJD,IAAA,CAAKO,GAAA,CAAIC,CAAJ,CACLN,IAAA,CAAIF,IAAAE,IACJC,IAAA,CAAIC,KAAA,CAAMA,KAAAK,OAAN,CAAmB,CAAnB,CACJI,OAAA,CAAKV,GAAAD,IACDY,IAAAA,CAAgB,UAAhBA,EAAKX,GAAAE,MAALS,EAAwC,UAAxCA,EAA4Bd,IAAAK,MAChC,IAAG,EAAAH,GAAA,CAAIW,MAAJ,CAAH,CAEC,IAAA,CAAMA,MAAN,EAAYX,GAAZ,EAAiB,CAACY,GAAlB,EAAwBA,GAAxB,EAA8BZ,GAA9B,CAAkCW,MAAlC,CAAA,CACCZ,MAIA,CAJOG,KAAAQ,IAAA,EAIP,CAHAT,GAGA,CAHIC,KAAA,CAAMA,KAAAK,OAAN,CAAmB,CAAnB,CAGJ,CAFAV,IAAAY,KAAA,CAAUV,MAAV,CAEA,CADAY,MACA,CADKV,GAAAD,IACL,CAAAY,GAAA,CAAiB,UAAjB,EAAKd,IAAAK,MAAL,EAAwC,UAAxC,EAA6BF,GAAAE,MAPnBD,MAAAO,KAAA,CAAWX,IAAX,CANR,CAmBN,MAAO,KAAIL,IAAJ,CAASI,IAAT,CA5C+B,CA8CpCN;MAAAC,QAAA,CAAeC,IAlDmG;",
"sources":["node_modules/math-expression-evaluator/src/postfix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$math_expression_evaluator$src$postfix\"] = function(global,require,module,exports) {\n\r\n    var Mexp=require('./lexer.js');\r\n\r\n\tMexp.prototype.toPostfix = function () {\r\n\t\t'use strict';\r\n\t\tvar post=[],elem,popped,prep,pre,ele;\r\n    \tvar stack=[{value:\"(\",type:4,pre:0}];\r\n\t\tvar arr=this.value;\r\n\t\tfor (var i=1; i < arr.length; i++) {\r\n\t\t\tif(arr[i].type===1||arr[i].type===3||arr[i].type===13){\t//if token is number,constant,or n(which is also a special constant in our case)\r\n\t\t\t\tif(arr[i].type===1)\r\n\t\t\t\t\tarr[i].value=Number(arr[i].value);\r\n\t\t\t\tpost.push(arr[i]);\r\n\t\t\t}\r\n\t\t\telse if(arr[i].type===4){\r\n\t\t\t\tstack.push(arr[i]);\r\n\t\t\t}\r\n\t\t\telse if(arr[i].type===5){\r\n\t\t\t\twhile((popped=stack.pop()).type!==4){\r\n\t\t\t\t\tpost.push(popped);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(arr[i].type===11){\r\n\t\t\t\twhile((popped=stack.pop()).type!==4){\r\n\t\t\t\t\tpost.push(popped);\r\n\t\t\t\t}\r\n\t\t\t\tstack.push(popped);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\telem=arr[i];\r\n\t\t\t\tpre=elem.pre;\r\n\t\t\t\tele=stack[stack.length-1];\r\n\t\t\t\tprep=ele.pre;\r\n\t\t\t\tvar flag=ele.value=='Math.pow'&&elem.value=='Math.pow';\r\n\t\t\t\tif(pre>prep)stack.push(elem);\r\n\t\t\t\telse {\r\n\t\t\t\t\twhile(prep>=pre&&!flag||flag&&pre<prep){\r\n\t\t\t\t\t\tpopped=stack.pop();\r\n\t\t\t\t\t\tele=stack[stack.length-1];\r\n\t\t\t\t\t\tpost.push(popped);\r\n\t\t\t\t\t\tprep=ele.pre;\r\n\t\t\t\t\t\tflag=elem.value=='Math.pow'&&ele.value=='Math.pow';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstack.push(elem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new Mexp(post);\r\n\t};\r\n    module.exports=Mexp;\n};"],
"names":["shadow$provide","global","require","module","exports","Mexp","prototype","toPostfix","Mexp.prototype.toPostfix","post","elem","popped","pre","ele","stack","value","type","arr","i","length","Number","push","pop","prep","flag"]
}
