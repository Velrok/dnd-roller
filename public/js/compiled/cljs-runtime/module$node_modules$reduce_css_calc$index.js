shadow$provide.module$node_modules$reduce_css_calc$index=function(global,require,module,exports){function getUnitsInExpression(expression){for(var uniqueUnits=[],uniqueLowerCaseUnits=[],unitRegEx=/[\.0-9]([%a-z]+)/gi,matches=unitRegEx.exec(expression);matches;)matches&&matches[1]&&(-1===uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase())&&(uniqueUnits.push(matches[1]),uniqueLowerCaseUnits.push(matches[1].toLowerCase())),matches=unitRegEx.exec(expression));return uniqueUnits}var balanced=require("module$node_modules$balanced_match$index"),
reduceFunctionCall=require("module$node_modules$reduce_function_call$index"),mexp=require("module$node_modules$math_expression_evaluator$src$formula_evaluator"),NESTED_CALC_RE=/(\+|\-|\*|\\|[^a-z]|)(\s*)(\()/g,stack;module.exports=function(value,decimalPrecision){function evaluateExpression(expression,functionIdentifier,call){if(100<stack++)throw stack=0,Error("Call stack overflow for "+call);if(""===expression)throw Error(functionIdentifier+"(): '"+call+"' must contain a non-whitespace string");
expression=evaluateNestedExpression(expression,call);call=getUnitsInExpression(expression);if(1<call.length||-1<expression.indexOf("var("))return functionIdentifier+"("+expression+")";call=call[0]||"";"%"===call&&(expression=expression.replace(/\b[0-9\.]+%/g,function(percent){return.01*parseFloat(percent.slice(0,-1))}));var toEvaluate=expression.replace(new RegExp(call,"gi"),"");try{var result=mexp.eval(toEvaluate)}catch(e){return functionIdentifier+"("+expression+")"}"%"===call&&(result*=100);if(functionIdentifier.length||
"%"===call)result=Math.round(result*decimalPrecision)/decimalPrecision;return result+call}function evaluateNestedExpression(expression,call){expression=expression.replace(/((?:\-[a-z]+\-)?calc)/g,"");for(var evaluatedPart="",nonEvaluatedPart=expression,matches;matches=NESTED_CALC_RE.exec(nonEvaluatedPart);){0<matches[0].index&&(evaluatedPart+=nonEvaluatedPart.substring(0,matches[0].index));nonEvaluatedPart=balanced("(",")",nonEvaluatedPart.substring([0].index));if(""===nonEvaluatedPart.body)throw Error("'"+
expression+"' must contain a non-whitespace string");matches=evaluateExpression(nonEvaluatedPart.body,"",call);evaluatedPart+=nonEvaluatedPart.pre+matches;nonEvaluatedPart=nonEvaluatedPart.post}return evaluatedPart+nonEvaluatedPart}stack=0;decimalPrecision=Math.pow(10,void 0===decimalPrecision?5:decimalPrecision);value=value.replace(/\n+/g," ");return reduceFunctionCall(value,/((?:\-[a-z]+\-)?calc)\(/,evaluateExpression)}}
//# sourceMappingURL=module$node_modules$reduce_css_calc$index.js.map
